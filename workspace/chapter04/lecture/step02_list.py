
# 1.List
# 변수=[값1, 값2, ... 값n]
# 값의 자료형은 숫자형, 문자형, 논리형 등을 함
# 1-1.단일 list 예
lst=[1,2,3,4,5]
print(lst)  #[1,2,3,4,5] << []가 있기 때문에 list로 인식
print(type(lst))  #<class 'list'>

for i in lst:
    print(lst[:i])
for i in lst:
    print(lst[i-1:])  #i 전까지 / i는 인덱스란 뜻

# 2.리스트 색인
# 리스트는 순서 자료구조이기 떄문에 색인을 이용해서 리스트의 원소를 참조할 수 있다.
# 색인=자료가 저장된 위치를 의미
# 2-1.단일 list 색인
x=list(range(1,11))
print(x)  #[1,2,3,4,5,6,7,8,9,10]
print(x[:5])  #[1,2,3,4,5]
print(x[-5:])  #[6,7,8,9,10]
print('index 2씩 증가')
print(x[::2])  #홀수 색인 / [1,3,5,7,9]
print(x[1::2]) #색인값1부터 시작하는 짝수 색인 / [2,4,6,8,10]


# 3.중첩 list
# 리스트 내에 또 다른 리스트가 포함된 형식을 중첩 리스트.
# 바깥쪽 리스트의 색인을 통해서 안쪽 리스트의 원소를 참조할 수 있다.
# [10,20, [100,200], 30,40]
#  0  1       2       3  4
# 3-1.단일 리스트 객체 생성
a= ['a','b','c']
print(a)

# 3-2.중첩 리스트 객체 생성
b=[10,20,a,5,True,'문자열']  #서로 다른 자료형 / a 때문에 중첩리스트가 됨
print(b[0])  #10
print(b[2])  #['a','b','c'] / 중첩 리스트
print(b[2][0])  #a / 중첩 리스트의 1번 원소 [중첩리스트][단일리스트 색인]
print(b[2][1:])  #['b','c'] / 중첩 리스트의 2번 이후 원소


# 4.리스트는 수정, 삭제, 추가 등이 가능함
# 단일 리스트 객체 생성
num=['one', 'two', 'three', 'four']
print(num)
print(len(num))  #4

# 4-1.리스트 원소 추가
num.append('five')  #추가
print(num)  #['one', 'two', 'three', 'four', 'five']

# 4-2.리스트 원소 삭제
num.remove('five')  #삭제
print(num)  #['one', 'two', 'three', 'four']

# 4-3.리스트 원소 수정
num[3]='4'  #리스트 색인 3에 있는 것을 4로 변경 / four->4
print(num)  #['one', 'two', 'three', '4']

# 4-4.리스트 원소 삽입
num.insert(0, 'zero')  #리스트 색인 0자리에 'zero' 삽입
print(num)  #['zero', 'one', 'two', 'three', '4']


# 5-1.리스트 결합
x=[1,2,3,4]
y=[1.5,2.5]
z=x+y  #nex object
print(z)  #[1,2,3,4,1.5,2.5]

# 5-2.리스트 확장 (하나의 리스트가 확장이 됨)
x.extend(y)  #x확장
print(x)  #[1,2,3,4,1.5,2.5]

# 5-3.리스트 추가 (중첩 리스트가 됨)
x.append(y)  #추가
print(x)  #[1,2,3,4, [1.5,2.5]]

# 5-4.리스트 두 배 확장 (곱하기)
lst=[1,2,3,4]
result=lst*2
print(result)  #[1,2,3,4,1,2,3,4]


# 6.리스트 정렬과 요소 검사
# 리스트의 원소가 숫자인 경우 오름차순 또는 내림차순으로 sort(정렬)이 가능하다
# 6-1.리스트 정렬
print(result)  #[1,2,3,4,1,2,3,4]
result.sort()  #오름차순 정렬
print(result)  #[1,1,2,2,3,3,4,4]
result.sort(reverse=True)  #내림차순 정렬
print(result)  #[4,4,3,3,2,2,1,1]

# 6-2.리스트 요소 검사
import random
r=[]  #빈 리스트
for i in range(5):  #5번 돌아~
    r.append(random.randint(1,5))  #1에서 5사이

print(r)
if 4 in r:  #랜덤 리스트 중에 4가 포함이 되었는가
    print('있음')  #[2,3,4,4,1]
else:
    print('없음')  #[5,2,1,3,2]


# 7.리스트 내포
# 변수=[실행문 for 변수 in 열거형객체]
# 1) for문에서 열거형객체의 원소 하나를 변수로 넘겨 받는다.
# 2) 변수에 할당된 값을 실행문으로 처리한다.
# 3) 처리된 결과를 변수에 순차적으로 추가(append)한다.

# 변수=[실행문 for 변수 in 열거형객체 if 조건식]
# 1) for문에서 열거형객체의 원소 하나를 변수로 넘겨 받는다.
# 2) 변수에 할당된 값을 조건식으로 사용하여 비교 판단
# 3) 조건이 참(True)이면 변수에 할당된 값을 실행문으로 처리한다.
# 4) 처리된 결과를 변수에 순차적으로 append한다.

# 7-1.형식1 변수=[실행문 for]
x=[2,4,1,5,7]
#print(x**2) <- error

lst=[i**2 for i in x]  #x변량에 제곱 계산
print(lst)  #[4,16,1,25,49]

# 7-2.형식2 변수=[실행문 for if]
# 1~10 -> 2의 배수 추출 -> i*2 -> list 저장
num = list(range(1,11))
print(num)  #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

lst2 = [i*2 for i in num if i%2==0]  #2로 나눴을 때 나머지가 0인 객체들을 2배한 객체들 모음
print(lst2)  #[4,8,12,16,20]



